// ==============================
// üîÅ AI Bayan ‚Äî Irregular & Phrasal Verbs Trainer
// 45 Irregular + 27 Phrasal, separate tabs & scores
// ==============================
document.addEventListener("DOMContentLoaded", () => {
  const screen = document.getElementById("irregular_trainer");
  if (!screen) return; // –µ—Å–ª–∏ —Å–µ–∫—Ü–∏—è –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ index.html

  // –ü–æ—Å—Ç—Ä–æ–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π UI, –µ—Å–ª–∏ –ø—É—Å—Ç–æ:
  if (!screen.dataset.ready) {
    screen.innerHTML = `
      <h2>üîÅ Irregular & Phrasal Verbs Trainer</h2>

      <div class="subtabs">
        <button class="subtab active" id="tabIrreg">Irregular Verbs</button>
        <button class="subtab" id="tabPhrasal">Phrasal Verbs</button>
      </div>

      <div id="irregularPane" class="subscreen active">
        <div id="irregContent"></div>
        <div class="scorebar"><span>Score:</span> <b id="irregScore">0</b> / <b id="irregTotal">45</b></div>
        <div class="nav">
          <button id="irPrev">‚¨ÖÔ∏è Previous</button>
          <button id="irNext">‚û°Ô∏è Next</button>
          <button class="back" onclick="show('menu')">üè† Back to Menu</button>
        </div>
      </div>

      <div id="phrasalPane" class="subscreen">
        <div id="phrasalContent"></div>
        <div class="scorebar"><span>Score:</span> <b id="phrasalScore">0</b> / <b id="phrasalTotal">27</b></div>
        <div class="nav">
          <button id="phPrev">‚¨ÖÔ∏è Previous</button>
          <button id="phNext">‚û°Ô∏è Next</button>
          <button class="back" onclick="show('menu')">üè† Back to Menu</button>
        </div>
      </div>
    `;
    screen.dataset.ready = "1";
  }

  // ====== DOM refs
  const tabIrregBtn = document.getElementById("tabIrreg");
  const tabPhrasalBtn = document.getElementById("tabPhrasal");
  const irregularPane = document.getElementById("irregularPane");
  const phrasalPane  = document.getElementById("phrasalPane");

  const irregContent = document.getElementById("irregContent");
  const phrasalContent = document.getElementById("phrasalContent");

  const irScoreEl = document.getElementById("irregScore");
  const phScoreEl = document.getElementById("phrasalScore");
  const irTotalEl = document.getElementById("irregTotal");   // 45
  const phTotalEl = document.getElementById("phrasalTotal"); // 27

  const irPrev = document.getElementById("irPrev");
  const irNext = document.getElementById("irNext");
  const phPrev = document.getElementById("phPrev");
  const phNext = document.getElementById("phNext");

  // ====== Data
  const irregulars = [
    // 45 irregular (–≤–æ–ø—Ä–æ—Å: –∫–∞–∫–∞—è —Ñ–æ—Ä–º–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä–æ—à–µ–¥—à–µ–≥–æ?)
    { q:"go ‚Üí ?",      options:["goed","went","gone","go"], a:1 },
    { q:"see ‚Üí ?",     options:["saw","seed","seen","see"], a:0 },
    { q:"come ‚Üí ?",    options:["comed","comes","came","come"], a:2 },
    { q:"eat ‚Üí ?",     options:["eated","ate","eaten","eat"], a:1 },
    { q:"write ‚Üí ?",   options:["writed","writes","wrote","write"], a:2 },
    { q:"run ‚Üí ?",     options:["ran","runned","run","running"], a:0 },
    { q:"buy ‚Üí ?",     options:["buyed","buys","bought","been"], a:2 },
    { q:"take ‚Üí ?",    options:["taked","took","taken","takes"], a:1 },
    { q:"make ‚Üí ?",    options:["made","maked","makes","making"], a:0 },
    { q:"drink ‚Üí ?",   options:["drank","drunk","drinked","drinks"], a:0 },
    { q:"choose ‚Üí ?",  options:["choosed","chose","choose","chosed"], a:1 },
    { q:"fly ‚Üí ?",     options:["flew","flyed","flies","flown"], a:0 },
    { q:"build ‚Üí ?",   options:["built","builded","builds","being"], a:0 },
    { q:"sleep ‚Üí ?",   options:["slept","sleeped","sleep","sleeps"], a:0 },
    { q:"break ‚Üí ?",   options:["breaked","broken","broke","breaks"], a:2 },
    { q:"begin ‚Üí ?",   options:["began","begun","begined","begin"], a:0 },
    { q:"find ‚Üí ?",    options:["found","finded","find","finds"], a:0 },
    { q:"teach ‚Üí ?",   options:["taught","teached","teachs","teach"], a:0 },
    { q:"think ‚Üí ?",   options:["thought","thinked","think","thinks"], a:0 },
    { q:"bring ‚Üí ?",   options:["brought","bringed","brang","brung"], a:0 },
    { q:"feel ‚Üí ?",    options:["felt","feeled","feel","feels"], a:0 },
    { q:"draw ‚Üí ?",    options:["drew","drawed","drawn","draw"], a:0 },
    { q:"swim ‚Üí ?",    options:["swam","swum","swimed","swimming"], a:0 },
    { q:"keep ‚Üí ?",    options:["kept","keeped","keep","keeps"], a:0 },
    { q:"sell ‚Üí ?",    options:["sold","selled","sell","sells"], a:0 },
    { q:"send ‚Üí ?",    options:["sent","sended","send","sends"], a:0 },
    { q:"say ‚Üí ?",     options:["said","sayed","say","says"], a:0 },
    { q:"meet ‚Üí ?",    options:["met","meeted","meet","meets"], a:0 },
    { q:"stand ‚Üí ?",   options:["stood","standed","stand","stands"], a:0 },
    { q:"sit ‚Üí ?",     options:["sat","sitted","sit","sits"], a:0 },
    { q:"understand ‚Üí ?", options:["understood","understanded","understand","understands"], a:0 },
    { q:"lose ‚Üí ?",    options:["lost","loses","loose","losing"], a:0 },
    { q:"cut ‚Üí ?",     options:["cut","cutted","cuts","cutting"], a:0 },
    { q:"hit ‚Üí ?",     options:["hit","hitted","hits","hitting"], a:0 },
    { q:"read ‚Üí ?",    options:["read","red","readed","reads"], a:0 },
    { q:"hurt ‚Üí ?",    options:["hurt","hurts","hurted","hurting"], a:0 },
    { q:"cost ‚Üí ?",    options:["cost","costed","costs","costing"], a:0 },
    { q:"light ‚Üí ?",   options:["lit","lighted","light","lights"], a:0 },
    { q:"grow ‚Üí ?",    options:["grew","growed","grown","grows"], a:0 },
    { q:"ride ‚Üí ?",    options:["rode","ridden","rided","rides"], a:0 },
    { q:"wear ‚Üí ?",    options:["wore","wear","worn","wears"], a:0 },
    { q:"speak ‚Üí ?",   options:["spoke","speak","spoken","speaks"], a:0 },
    { q:"give ‚Üí ?",    options:["gave","given","gived","gives"], a:0 },
    { q:"become ‚Üí ?",  options:["became","becomed","become","becomes"], a:0 },
    { q:"hold ‚Üí ?",    options:["held","holded","holds","holding"], a:0 },
    { q:"pay ‚Üí ?",     options:["paid","payed","pays","pay"], a:0 },
  ];

  const phrasals = [
    // 27 phrasal (–≤–æ–ø—Ä–æ—Å: –∑–Ω–∞—á–µ–Ω–∏–µ)
    { q:'"turn on" means‚Ä¶',      options:["switch on (a device)","run away","get up","go out"], a:0 },
    { q:'"turn off" means‚Ä¶',     options:["switch off","stand up","break in","get down"], a:0 },
    { q:'"wake up" means‚Ä¶',      options:["stop sleeping","go to bed","fall down","look up"], a:0 },
    { q:'"get up" means‚Ä¶',       options:["rise from bed","sit down","fall over","run away"], a:0 },
    { q:'"sit down" means‚Ä¶',     options:["take a seat","stand up","fall down","go away"], a:0 },
    { q:'"stand up" means‚Ä¶',     options:["rise to your feet","sit","fall","jump"], a:0 },
    { q:'"look for" means‚Ä¶',     options:["search","see","watch","find"], a:0 },
    { q:'"look after" means‚Ä¶',   options:["take care of","search","look around","watch"], a:0 },
    { q:'"give up" means‚Ä¶',      options:["stop trying","donate","stand up","go on"], a:0 },
    { q:'"carry on" means‚Ä¶',     options:["continue","stop","move","drop"], a:0 },
    { q:'"put on" means‚Ä¶',       options:["wear","remove","turn","pull"], a:0 },
    { q:'"take off" means‚Ä¶',     options:["remove clothes","put on","land","go away"], a:0 },
    { q:'"come back" means‚Ä¶',    options:["return","arrive","go away","stay"], a:0 },
    { q:'"go out" means‚Ä¶',       options:["leave home","enter","stay","move"], a:0 },
    { q:'"find out" means‚Ä¶',     options:["discover","lose","forget","hide"], a:0 },
    { q:'"turn up" means‚Ä¶',      options:["arrive","decrease","turn off","switch down"], a:0 },
    { q:'"turn down" means‚Ä¶',    options:["refuse","increase","turn up","accept"], a:0 },
    { q:'"pick up" means‚Ä¶',      options:["lift","drop","fall","push"], a:0 },
    { q:'"drop off" means‚Ä¶',     options:["leave","pick up","stay","wake up"], a:0 },
    { q:'"call back" means‚Ä¶',    options:["return a call","hang up","pick up","talk"], a:0 },
    { q:'"look up" means‚Ä¶',      options:["search information","see sky","look down","read"], a:0 },
    { q:'"look down on" means‚Ä¶', options:["disrespect","respect","like","admire"], a:0 },
    { q:'"get on with" means‚Ä¶',  options:["have good relations","fight","ignore","argue"], a:0 },
    { q:'"break up" means‚Ä¶',     options:["end a relationship","start","join","repair"], a:0 },
    { q:'"go on" means‚Ä¶',        options:["continue","stop","finish","turn"], a:0 },
    { q:'"set up" means‚Ä¶',       options:["start","close","delete","break"], a:0 },
    { q:'"bring up" means‚Ä¶',     options:["raise a child","drop","teach","fall"], a:0 },
  ];

  // ====== State & storage
  const LS_KEYS = {
    irIndex: "ib_ir_index",
    phIndex: "ib_ph_index",
    irScore: "ib_ir_score",
    phScore: "ib_ph_score",
  };

  let irIndex  = +(localStorage.getItem(LS_KEYS.irIndex)  ?? 0);
  let phIndex  = +(localStorage.getItem(LS_KEYS.phIndex)  ?? 0);
  let irScore  = +(localStorage.getItem(LS_KEYS.irScore)  ?? 0);
  let phScore  = +(localStorage.getItem(LS_KEYS.phScore)  ?? 0);

  irTotalEl.textContent = irregulars.length;
  phTotalEl.textContent = phrasals.length;
  irScoreEl.textContent = irScore;
  phScoreEl.textContent = phScore;

  // ====== Tabs
  function openIrregular() {
    tabIrregBtn.classList.add("active");
    tabPhrasalBtn.classList.remove("active");
    irregularPane.classList.add("active");
    phrasalPane.classList.remove("active");
    renderIrregular();
  }
  function openPhrasal() {
    tabPhrasalBtn.classList.add("active");
    tabIrregBtn.classList.remove("active");
    phrasalPane.classList.add("active");
    irregularPane.classList.remove("active");
    renderPhrasal();
  }
  tabIrregBtn.onclick = openIrregular;
  tabPhrasalBtn.onclick = openPhrasal;

  // ====== Renderers
  function renderIrregular() {
    // —Ñ–∏–Ω–∞–ª?
    if (irIndex >= irregulars.length) {
      irregContent.innerHTML = `
        <div class="final-screen">
          <h3>üéâ Well done!</h3>
          <p>You finished the <b>Irregular Verbs</b> section.</p>
          <p>‚≠ê Score: <b>${irScore}</b> / ${irregulars.length}</p>
          <div class="nav">
            <button onclick="show('menu')">üè† Back to Menu</button>
            <button id="gotoPhrasal">üîÅ Go to Phrasal Verbs</button>
          </div>
        </div>`;
      const goto = document.getElementById("gotoPhrasal");
      if (goto) goto.onclick = openPhrasal;
      return;
    }

    const q = irregulars[irIndex];
    irregContent.innerHTML = `
      <h3>${irIndex + 1}. ${q.q}</h3>
      <div class="options">
        ${q.options.map((opt,i)=>(
          `<button class="option" data-i="${i}">${opt}</button>`
        )).join("")}
      </div>
      <div class="progress">Question ${irIndex + 1} of ${irregulars.length}</div>
    `;

    irScoreEl.textContent = irScore;

    irregContent.querySelectorAll(".option").forEach(btn=>{
      btn.onclick = () => {
        const i = +btn.dataset.i;
        if (i === q.a) {
          irScore++;
          irScoreEl.textContent = irScore;
          localStorage.setItem(LS_KEYS.irScore, irScore);
          // —ç—Ñ—Ñ–µ–∫—Ç—ã
          if (typeof window.popStar === "function") window.popStar();
          try { new Audio("sound/ding.wav").play(); } catch(e){}
        }
        // —Å–ª–µ–¥—É—é—â–∏–π
        irIndex++;
        localStorage.setItem(LS_KEYS.irIndex, irIndex);
        renderIrregular();
      };
    });
  }

  function renderPhrasal() {
    if (phIndex >= phrasals.length) {
      phrasalContent.innerHTML = `
        <div class="final-screen">
          <h3>üéâ Great job!</h3>
          <p>You finished the <b>Phrasal Verbs</b> section.</p>
          <p>‚≠ê Score: <b>${phScore}</b> / ${phrasals.length}</p>
          <div class="nav">
            <button onclick="show('menu')">üè† Back to Menu</button>
            <button id="gotoIrregular">üîÅ Go to Irregular Verbs</button>
          </div>
        </div>`;
      const goto = document.getElementById("gotoIrregular");
      if (goto) goto.onclick = openIrregular;
      return;
    }

    const q = phrasals[phIndex];
    phrasalContent.innerHTML = `
      <h3>${phIndex + 1}. ${q.q}</h3>
      <div class="options">
        ${q.options.map((opt,i)=>(
          `<button class="option" data-i="${i}">${opt}</button>`
        )).join("")}
      </div>
      <div class="progress">Question ${phIndex + 1} of ${phrasals.length}</div>
    `;

    phScoreEl.textContent = phScore;

    phrasalContent.querySelectorAll(".option").forEach(btn=>{
      btn.onclick = () => {
        const i = +btn.dataset.i;
        if (i === q.a) {
          phScore++;
          phScoreEl.textContent = phScore;
          localStorage.setItem(LS_KEYS.phScore, phScore);
          if (typeof window.popStar === "function") window.popStar();
          try { new Audio("sound/ding.wav").play(); } catch(e){}
        }
        phIndex++;
        localStorage.setItem(LS_KEYS.phIndex, phIndex);
        renderPhrasal();
      };
    });
  }

  // ====== Prev/Next (—Ä—É—á–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è)
  irPrev.onclick = () => {
    irIndex = Math.max(0, irIndex - 1);
    localStorage.setItem(LS_KEYS.irIndex, irIndex);
    renderIrregular();
  };
  irNext.onclick = () => {
    irIndex = Math.min(irregulars.length, irIndex + 1);
    localStorage.setItem(LS_KEYS.irIndex, irIndex);
    renderIrregular();
  };

  phPrev.onclick = () => {
    phIndex = Math.max(0, phIndex - 1);
    localStorage.setItem(LS_KEYS.phIndex, phIndex);
    renderPhrasal();
  };
  phNext.onclick = () => {
    phIndex = Math.min(phrasals.length, phIndex + 1);
    localStorage.setItem(LS_KEYS.phIndex, phIndex);
    renderPhrasal();
  };

  // —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ ‚Äî Irregular
  openIrregular();
});
